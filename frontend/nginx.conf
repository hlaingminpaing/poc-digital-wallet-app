server {
  listen 80;
  server_name localhost;

  root /usr/share/nginx/html;
  index index.html;

  location / {
    try_files $uri /index.html;
  }

  resolver 10.96.0.10 valid=30s;
  set $users_service "users-service";
  set $wallet_service "wallet-service";
  set $transactions_service "transactions-service";
  set $transfer_service "transfer-service";

  # Kubernetes-friendly reverse proxy configuration
  location /api/users/ {
    proxy_pass http://users-service.default.svc.cluster.local:3001/;
  }

  location /api/wallet/ {
    proxy_pass http://wallet-service.default.svc.cluster.local:3001/;
  }

  location /api/transactions/ {
    proxy_pass http://transactions-service.default.svc.cluster.local:3001/;
  }

  location /api/transfer/ {
    proxy_pass http://transfer-service.default.svc.cluster.local:3001/;
  }
}

# server {
#   listen 80;
#   server_name localhost;

#   # Root directory for the built React app
#   root /usr/share/nginx/html;
#   index index.html;

#   # Serve static files directly
#   location / {
#     try_files $uri /index.html;
#   }

#   # Reverse proxy for API calls to the backend services
#   # This single location block will handle all API routes based on the vite.config.js setup
#   location /api/ {
#     # We need a resolver to use Docker's internal DNS
#     resolver 127.0.0.11 valid=30s;

#     # The proxy_pass directive needs a variable to use the resolver
#     # We will extract the service name from the URL
#     # e.g., /api/users/register -> $service_name = users
#     if ($request_uri ~* "^/api/([a-z]+(?:-service)?)/?(.*)") {
#       set $service_name $1;
#       set $proxy_path $2;
#     }
    
#     # Correct the service name if it's a short version
#     if ($service_name = 'users') { set $service_name 'users-service'; }
#     if ($service_name = 'wallet') { set $service_name 'wallet-service'; }
#     if ($service_name = 'transactions') { set $service_name 'transactions-service'; }
#     if ($service_name = 'transfer') { set $service_name 'transfer-service'; }

#     proxy_pass http://$service_name:3001/$proxy_path$is_args$args;
    
#     proxy_set_header Host $host;
#     proxy_set_header X-Real-IP $remote_addr;
#     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#     proxy_set_header X-Forwarded-Proto $scheme;
#   }
# }